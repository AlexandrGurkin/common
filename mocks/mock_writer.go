// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/AlexandrGurkin/common/xlog (interfaces: WriteSyncer)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockWriteSyncer is a mock of WriteSyncer interface.
type MockWriteSyncer struct {
	ctrl     *gomock.Controller
	recorder *MockWriteSyncerMockRecorder
}

// MockWriteSyncerMockRecorder is the mock recorder for MockWriteSyncer.
type MockWriteSyncerMockRecorder struct {
	mock *MockWriteSyncer
}

// NewMockWriteSyncer creates a new mock instance.
func NewMockWriteSyncer(ctrl *gomock.Controller) *MockWriteSyncer {
	mock := &MockWriteSyncer{ctrl: ctrl}
	mock.recorder = &MockWriteSyncerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriteSyncer) EXPECT() *MockWriteSyncerMockRecorder {
	return m.recorder
}

// Sync mocks base method.
func (m *MockWriteSyncer) Sync() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync")
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockWriteSyncerMockRecorder) Sync() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockWriteSyncer)(nil).Sync))
}

// Write mocks base method.
func (m *MockWriteSyncer) Write(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockWriteSyncerMockRecorder) Write(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockWriteSyncer)(nil).Write), arg0)
}
